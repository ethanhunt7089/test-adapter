'use client';

import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { api } from '@/lib/api';
import { Member } from '@/types/member';
import { useState } from 'react';
import { toast } from 'sonner';

interface CreditManagementModalProps {
  member: Member;
  onSuccess?: () => void;
}

export function CreditManagementModal({ member, onSuccess }: CreditManagementModalProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [action, setAction] = useState<'add' | 'remove' | 'cashout' | 'deposit'>('deposit');
  const [loading, setLoading] = useState(false);
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô reset form
  const resetForm = () => {
    setFormData({
      amount: '0',
      phone: member.username || '',
      remarks: '',
      currency: 'LAK',
      bankName: 'BCEL',
      dateDeposit: new Date().toISOString().split('T')[0],
      timeDeposit: new Date().toTimeString().split(' ')[0],
      actualDateTime: new Date().toISOString()
    });
    setAction('deposit');
  };

  const [formData, setFormData] = useState({
    amount: '0',
    phone: member.username || '',
    remarks: '',
    currency: 'LAK',
    bankName: 'BCEL',
    dateDeposit: new Date().toISOString().split('T')[0],
    timeDeposit: new Date().toTimeString().split(' ')[0],
    actualDateTime: new Date().toISOString()
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      switch (action) {
        case 'add':
          await api.addCredit(member.id!, {
            phone: formData.phone,
            amount: parseFloat(formData.amount),
            remarks: formData.remarks
          });
          toast.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          break;

        case 'remove':
          console.log('üîç [TEST-ADAPTER] Attempting to remove credit:', {
            memberId: member.id,
            amount: parseFloat(formData.amount),
            remarks: formData.remarks
          });
          
          await api.removeCredit(member.id!, {
            amount: parseFloat(formData.amount),
            remarks: formData.remarks
          });
          
          console.log('‚úÖ [TEST-ADAPTER] Remove credit successful');
          toast.success('‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          break;

        case 'cashout':
          await api.cashoutCredit(member.id!, {
            remarks: formData.remarks
          });
          toast.success('‡∏ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          break;

        case 'deposit':
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
          if (!formData.phone || !formData.amount || parseFloat(formData.amount) <= 0) {
            toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            return;
          }
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á actualDateTime ‡∏à‡∏≤‡∏Å dateDeposit ‡πÅ‡∏•‡∏∞ timeDeposit
          const depositDate = new Date(formData.dateDeposit);
          const [hours, minutes] = formData.timeDeposit.split(':');
          depositDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
          
          await api.deposit({
            phone: formData.phone,
            amount: parseFloat(formData.amount),
            currency: formData.currency || 'LAK',
            bankName: formData.bankName || 'BCEL',
            dateDeposit: formData.dateDeposit,
            timeDeposit: formData.timeDeposit,
            actualDateTime: depositDate.toISOString()
          });
          toast.success('‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          break;
      }

      setIsOpen(false);
      resetForm(); // Reset form ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onSuccess ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    } catch (error: any) {
      toast.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      setIsOpen(open);
      if (!open) {
        resetForm(); // Reset form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î modal
      }
    }}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï - {member.name}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</Label>
            <Select value={action} onValueChange={(value: any) => setAction(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="add">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</SelectItem>
                <SelectItem value="remove">‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</SelectItem>
                <SelectItem value="cashout">‡∏ñ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</SelectItem>
                <SelectItem value="deposit">‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {action !== 'cashout' && (
            <div className="space-y-2">
              <Label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</Label>
              <Input
                type="number"
                value={formData.amount}
                onChange={(e) => setFormData({ ...formData, amount: e.target.value })}
                placeholder="0.00"
                required
              />
            </div>
          )}

          {action === 'add' && (
            <div className="space-y-2">
              <Label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</Label>
              <Input
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                required
              />
            </div>
          )}

          {action === 'deposit' && (
            <>
              <div className="space-y-2">
                <Label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</Label>
                <Input
                  value={member.username || formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label>‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô</Label>
                <Input
                  value="LAK"
                  disabled
                  className="bg-gray-100"
                />
              </div>
              
              <div className="space-y-2">
                <Label>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</Label>
                <Input
                  value="BCEL"
                  disabled
                  className="bg-gray-100"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-2">
                <div className="space-y-2">
                  <Label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
                  <Input
                    type="date"
                    value={formData.dateDeposit}
                    onChange={(e) => setFormData({ ...formData, dateDeposit: e.target.value })}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label>‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ô</Label>
                  <Input
                    type="time"
                    value={formData.timeDeposit}
                    onChange={(e) => setFormData({ ...formData, timeDeposit: e.target.value })}
                    required
                  />
                </div>
              </div>
            </>
          )}

          <div className="space-y-2">
            <Label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Label>
            <Textarea
              value={formData.remarks}
              onChange={(e) => setFormData({ ...formData, remarks: e.target.value })}
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => {
              setIsOpen(false);
              resetForm(); // Reset form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            }}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
} 